"use strict";
/******************************************************************************
 * This file was generated by langium-cli 0.2.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMaintainer = exports.Maintainer = exports.isLabels = exports.Labels = exports.isLabelingProcesses = exports.LabelingProcesses = exports.isLabelingProcess = exports.LabelingProcess = exports.isGatheringProcesses = exports.GatheringProcesses = exports.isGatheringProcess = exports.GatheringProcess = exports.isFunder = exports.Funder = exports.isFounders = exports.Founders = exports.isDistribution = exports.Distribution = exports.isDescriptionDataset = exports.DescriptionDataset = exports.isDependencies = exports.Dependencies = exports.isDemographics = exports.Demographics = exports.isDeclaration = exports.Declaration = exports.isDataInstances = exports.DataInstances = exports.isDataInstance = exports.DataInstance = exports.isConsistencyRules = exports.ConsistencyRules = exports.isComposition = exports.Composition = exports.isCategor = exports.Categor = exports.isBinary = exports.Binary = exports.isAuthors = exports.Authors = exports.isAuthoring = exports.Authoring = exports.isAuthor = exports.Author = exports.isAttribute = exports.Attribute = exports.isArea = exports.Area = exports.isApplications = exports.Applications = void 0;
exports.reflection = exports.datasetDescriptorAstReflection = exports.isTeam = exports.Team = exports.isTags = exports.Tags = exports.isStatistics = exports.Statistics = exports.isSpeechSitatuion = exports.SpeechSitatuion = exports.isSource = exports.Source = exports.isSocialIssue = exports.SocialIssue = exports.isSocialConcerns = exports.SocialConcerns = exports.isRequeriments = exports.Requeriments = exports.isRelationInstances = exports.RelationInstances = exports.isRelation = exports.Relation = exports.isQualityMetric = exports.QualityMetric = exports.isProvenance = exports.Provenance = exports.isPreProcesses = exports.PreProcesses = exports.isPreProcess = exports.PreProcess = exports.isPairCorrelation = exports.PairCorrelation = exports.isNumeri = exports.Numeri = exports.isMetadata = exports.Metadata = void 0;
/* eslint-disable @typescript-eslint/array-type */
/* eslint-disable @typescript-eslint/no-empty-interface */
const langium_1 = require("langium");
exports.Applications = 'Applications';
function isApplications(item) {
    return exports.reflection.isInstance(item, exports.Applications);
}
exports.isApplications = isApplications;
exports.Area = 'Area';
function isArea(item) {
    return exports.reflection.isInstance(item, exports.Area);
}
exports.isArea = isArea;
exports.Attribute = 'Attribute';
function isAttribute(item) {
    return exports.reflection.isInstance(item, exports.Attribute);
}
exports.isAttribute = isAttribute;
exports.Author = 'Author';
function isAuthor(item) {
    return exports.reflection.isInstance(item, exports.Author);
}
exports.isAuthor = isAuthor;
exports.Authoring = 'Authoring';
function isAuthoring(item) {
    return exports.reflection.isInstance(item, exports.Authoring);
}
exports.isAuthoring = isAuthoring;
exports.Authors = 'Authors';
function isAuthors(item) {
    return exports.reflection.isInstance(item, exports.Authors);
}
exports.isAuthors = isAuthors;
exports.Binary = 'Binary';
function isBinary(item) {
    return exports.reflection.isInstance(item, exports.Binary);
}
exports.isBinary = isBinary;
exports.Categor = 'Categor';
function isCategor(item) {
    return exports.reflection.isInstance(item, exports.Categor);
}
exports.isCategor = isCategor;
exports.Composition = 'Composition';
function isComposition(item) {
    return exports.reflection.isInstance(item, exports.Composition);
}
exports.isComposition = isComposition;
exports.ConsistencyRules = 'ConsistencyRules';
function isConsistencyRules(item) {
    return exports.reflection.isInstance(item, exports.ConsistencyRules);
}
exports.isConsistencyRules = isConsistencyRules;
exports.DataInstance = 'DataInstance';
function isDataInstance(item) {
    return exports.reflection.isInstance(item, exports.DataInstance);
}
exports.isDataInstance = isDataInstance;
exports.DataInstances = 'DataInstances';
function isDataInstances(item) {
    return exports.reflection.isInstance(item, exports.DataInstances);
}
exports.isDataInstances = isDataInstances;
exports.Declaration = 'Declaration';
function isDeclaration(item) {
    return exports.reflection.isInstance(item, exports.Declaration);
}
exports.isDeclaration = isDeclaration;
exports.Demographics = 'Demographics';
function isDemographics(item) {
    return exports.reflection.isInstance(item, exports.Demographics);
}
exports.isDemographics = isDemographics;
exports.Dependencies = 'Dependencies';
function isDependencies(item) {
    return exports.reflection.isInstance(item, exports.Dependencies);
}
exports.isDependencies = isDependencies;
exports.DescriptionDataset = 'DescriptionDataset';
function isDescriptionDataset(item) {
    return exports.reflection.isInstance(item, exports.DescriptionDataset);
}
exports.isDescriptionDataset = isDescriptionDataset;
exports.Distribution = 'Distribution';
function isDistribution(item) {
    return exports.reflection.isInstance(item, exports.Distribution);
}
exports.isDistribution = isDistribution;
exports.Founders = 'Founders';
function isFounders(item) {
    return exports.reflection.isInstance(item, exports.Founders);
}
exports.isFounders = isFounders;
exports.Funder = 'Funder';
function isFunder(item) {
    return exports.reflection.isInstance(item, exports.Funder);
}
exports.isFunder = isFunder;
exports.GatheringProcess = 'GatheringProcess';
function isGatheringProcess(item) {
    return exports.reflection.isInstance(item, exports.GatheringProcess);
}
exports.isGatheringProcess = isGatheringProcess;
exports.GatheringProcesses = 'GatheringProcesses';
function isGatheringProcesses(item) {
    return exports.reflection.isInstance(item, exports.GatheringProcesses);
}
exports.isGatheringProcesses = isGatheringProcesses;
exports.LabelingProcess = 'LabelingProcess';
function isLabelingProcess(item) {
    return exports.reflection.isInstance(item, exports.LabelingProcess);
}
exports.isLabelingProcess = isLabelingProcess;
exports.LabelingProcesses = 'LabelingProcesses';
function isLabelingProcesses(item) {
    return exports.reflection.isInstance(item, exports.LabelingProcesses);
}
exports.isLabelingProcesses = isLabelingProcesses;
exports.Labels = 'Labels';
function isLabels(item) {
    return exports.reflection.isInstance(item, exports.Labels);
}
exports.isLabels = isLabels;
exports.Maintainer = 'Maintainer';
function isMaintainer(item) {
    return exports.reflection.isInstance(item, exports.Maintainer);
}
exports.isMaintainer = isMaintainer;
exports.Metadata = 'Metadata';
function isMetadata(item) {
    return exports.reflection.isInstance(item, exports.Metadata);
}
exports.isMetadata = isMetadata;
exports.Numeri = 'Numeri';
function isNumeri(item) {
    return exports.reflection.isInstance(item, exports.Numeri);
}
exports.isNumeri = isNumeri;
exports.PairCorrelation = 'PairCorrelation';
function isPairCorrelation(item) {
    return exports.reflection.isInstance(item, exports.PairCorrelation);
}
exports.isPairCorrelation = isPairCorrelation;
exports.PreProcess = 'PreProcess';
function isPreProcess(item) {
    return exports.reflection.isInstance(item, exports.PreProcess);
}
exports.isPreProcess = isPreProcess;
exports.PreProcesses = 'PreProcesses';
function isPreProcesses(item) {
    return exports.reflection.isInstance(item, exports.PreProcesses);
}
exports.isPreProcesses = isPreProcesses;
exports.Provenance = 'Provenance';
function isProvenance(item) {
    return exports.reflection.isInstance(item, exports.Provenance);
}
exports.isProvenance = isProvenance;
exports.QualityMetric = 'QualityMetric';
function isQualityMetric(item) {
    return exports.reflection.isInstance(item, exports.QualityMetric);
}
exports.isQualityMetric = isQualityMetric;
exports.Relation = 'Relation';
function isRelation(item) {
    return exports.reflection.isInstance(item, exports.Relation);
}
exports.isRelation = isRelation;
exports.RelationInstances = 'RelationInstances';
function isRelationInstances(item) {
    return exports.reflection.isInstance(item, exports.RelationInstances);
}
exports.isRelationInstances = isRelationInstances;
exports.Requeriments = 'Requeriments';
function isRequeriments(item) {
    return exports.reflection.isInstance(item, exports.Requeriments);
}
exports.isRequeriments = isRequeriments;
exports.SocialConcerns = 'SocialConcerns';
function isSocialConcerns(item) {
    return exports.reflection.isInstance(item, exports.SocialConcerns);
}
exports.isSocialConcerns = isSocialConcerns;
exports.SocialIssue = 'SocialIssue';
function isSocialIssue(item) {
    return exports.reflection.isInstance(item, exports.SocialIssue);
}
exports.isSocialIssue = isSocialIssue;
exports.Source = 'Source';
function isSource(item) {
    return exports.reflection.isInstance(item, exports.Source);
}
exports.isSource = isSource;
exports.SpeechSitatuion = 'SpeechSitatuion';
function isSpeechSitatuion(item) {
    return exports.reflection.isInstance(item, exports.SpeechSitatuion);
}
exports.isSpeechSitatuion = isSpeechSitatuion;
exports.Statistics = 'Statistics';
function isStatistics(item) {
    return exports.reflection.isInstance(item, exports.Statistics);
}
exports.isStatistics = isStatistics;
exports.Tags = 'Tags';
function isTags(item) {
    return exports.reflection.isInstance(item, exports.Tags);
}
exports.isTags = isTags;
exports.Team = 'Team';
function isTeam(item) {
    return exports.reflection.isInstance(item, exports.Team);
}
exports.isTeam = isTeam;
class datasetDescriptorAstReflection {
    getAllTypes() {
        return ['Applications', 'Area', 'Attribute', 'Author', 'Authoring', 'Authors', 'Binary', 'Categor', 'Composition', 'ConsistencyRules', 'DataInstance', 'DataInstances', 'Declaration', 'Demographics', 'Dependencies', 'DescriptionDataset', 'Distribution', 'Founders', 'Funder', 'GatheringProcess', 'GatheringProcesses', 'LabelingProcess', 'LabelingProcesses', 'Labels', 'Maintainer', 'Metadata', 'Numeri', 'PairCorrelation', 'PreProcess', 'PreProcesses', 'Provenance', 'QualityMetric', 'Relation', 'RelationInstances', 'Requeriments', 'SocialConcerns', 'SocialIssue', 'Source', 'SpeechSitatuion', 'Statistics', 'Tags', 'Team'];
    }
    isInstance(node, type) {
        return (0, langium_1.isAstNode)(node) && this.isSubtype(node.$type, type);
    }
    isSubtype(subtype, supertype) {
        if (subtype === supertype) {
            return true;
        }
        switch (subtype) {
            default: {
                return false;
            }
        }
    }
    getReferenceType(referenceId) {
        switch (referenceId) {
            case 'Attribute:labelProces': {
                return exports.LabelingProcess;
            }
            case 'ConsistencyRules:attrule1': {
                return exports.Attribute;
            }
            case 'ConsistencyRules:attrule2': {
                return exports.Attribute;
            }
            case 'ConsistencyRules:instance1': {
                return exports.DataInstance;
            }
            case 'GatheringProcess:labelSocialIssues': {
                return exports.SocialIssue;
            }
            case 'GatheringProcess:mapInstance': {
                return exports.DataInstance;
            }
            case 'LabelingProcess:labelSocialIssues': {
                return exports.SocialIssue;
            }
            case 'Labels:map': {
                return exports.Attribute;
            }
            case 'PairCorrelation:attr1': {
                return exports.Attribute;
            }
            case 'PairCorrelation:attr2': {
                return exports.Attribute;
            }
            case 'Relation:attRel': {
                return exports.Attribute;
            }
            case 'Relation:attRelTarget': {
                return exports.Attribute;
            }
            case 'Relation:insRel': {
                return exports.DataInstance;
            }
            case 'SocialIssue:senseAtt': {
                return exports.Attribute;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
}
exports.datasetDescriptorAstReflection = datasetDescriptorAstReflection;
exports.reflection = new datasetDescriptorAstReflection();
//# sourceMappingURL=ast.js.map